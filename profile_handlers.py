from telebot import types
import database

def setup_profile_handlers(bot):
    @bot.message_handler(commands=['start'])
    def welcome(message):
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        
        conn = database.connect_db()
        cursor = conn.cursor()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        cursor.execute('SELECT * FROM users WHERE id=?', (user_id,))
        if cursor.fetchone() is None:
            cursor.execute('INSERT INTO users (id, username, first_name) VALUES (?, ?, ?)', (user_id, username, first_name))
            conn.commit()

        cursor.close()
        conn.close()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        profile_button = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        products_button = types.KeyboardButton("üõçÔ∏è –¢–æ–≤–∞—Ä—ã")
        markup.add(profile_button, products_button)
        
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! üëã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã.", reply_markup=markup)

    @bot.message_handler(commands=['cancel'])
    def cancel(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        profile_button = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        products_button = types.KeyboardButton("üõçÔ∏è –¢–æ–≤–∞—Ä—ã")
        markup.add(profile_button, products_button)
        
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=markup)

    @bot.message_handler(regexp="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    def profile(message):
        user_id = message.from_user.id
        
        conn = database.connect_db()
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users WHERE id=?', (user_id,))
        user = cursor.fetchone()
        
        cursor.close()
        conn.close()
        
        if user:
            user_id = user[0]
            username = user[1]
            first_name = user[2]
            balance = user[3]
            total_topups = user[4]
            total_purchases = user[5]
            
            markup = types.InlineKeyboardMarkup()
            top_up_button = types.InlineKeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='top_up')
            gift_balance_button = types.InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='gift_balance')
            markup.add(top_up_button, gift_balance_button)
            
            bot.send_message(
                message.chat.id,
                f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nID: {user_id}\nüë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\nüìõ –ò–º—è: {first_name}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±\nüí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {total_topups:.2f} —Ä—É–±\nüõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}",
                reply_markup=markup
            )

    @bot.message_handler(regexp="üõçÔ∏è –¢–æ–≤–∞—Ä—ã")
    def products(message):
        conn = database.connect_db()
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM products')
        product_list = cursor.fetchall()

        cursor.close()
        conn.close()

        if not product_list:
            bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        markup = types.InlineKeyboardMarkup()
        for product in product_list:
            markup.add(types.InlineKeyboardButton(text=product[1], callback_data=f'view_product_{product[0]}'))

        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('view_product_'))
    def view_product(call):
        product_id = int(call.data.split('_')[2])
        
        conn = database.connect_db()
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))
        product = cursor.fetchone()
        
        cursor.close()
        conn.close()
        
        if not product:
            bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        product_name = product[1]
        price = product[2]
        file_id = product[3]
        description = product[4]

        file_info = bot.get_file(file_id)
        file_type = file_info.file_path.split('.')[-1]

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f'buy_product_{product_id}_{call.message.message_id}'))
        markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'back_to_products_{call.message.message_id}'))

        product_message = bot.send_message(
            call.message.chat.id,
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –§–∞–π–ª {file_type.upper()}\n–¶–µ–Ω–∞: {price:.2f} —Ä—É–±",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_products_'))
    def back_to_products(call):
        data = call.data.split('_')
        original_message_id = int(data[-1])
        bot.delete_message(call.message.chat.id, original_message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        products(call.message)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('buy_product_'))
    def buy_product(call):
        data = call.data.split('_')
        product_id = int(data[2])
        original_message_id = int(data[-1])
        user_id = call.message.chat.id
        
        conn = database.connect_db()
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))
        product = cursor.fetchone()
        
        if not product:
            bot.send_message(user_id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        product_name = product[1]
        price = product[2]
        file_id = product[3]
        
        cursor.execute('SELECT balance, total_purchases FROM users WHERE id = ?', (user_id,))
        user_data = cursor.fetchone()
        user_balance = user_data[0]
        total_purchases = user_data[1]
        
        if user_balance < price:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
            return

        cursor.execute('UPDATE users SET balance = balance - ?, total_purchases = total_purchases + 1 WHERE id = ?', (price, user_id))
        conn.commit()
        
        bot.send_document(user_id, file_id, caption=f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {product_name} –∑–∞ {price:.2f} —Ä—É–±.")

        bot.delete_message(call.message.chat.id, original_message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        cursor.close()
        conn.close()
