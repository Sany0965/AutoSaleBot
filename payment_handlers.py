from telebot import types, TeleBot
import database
import utils
from yoomoney import Quickpay, Client
import config

invoices = {}

def setup_payment_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data == 'top_up')
    def top_up_balance(call):
        markup = types.InlineKeyboardMarkup()
        cryptobot_button = types.InlineKeyboardButton(text="ü§ñ Cryptobot", callback_data='top_up_cryptobot')
        umoney_button = types.InlineKeyboardButton(text="üí≥ –ÆMoney", callback_data='top_up_umoney')
        markup.add(cryptobot_button, umoney_button)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == 'top_up_cryptobot')
    def top_up_cryptobot(call):
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (–æ—Ç 5 –¥–æ 15000 —Ä—É–±):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(call.message, process_top_up_cryptobot_step)
    
    @bot.callback_query_handler(func=lambda call: call.data == 'top_up_umoney')
    def top_up_umoney(call):
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (–æ—Ç 5 –¥–æ 15000 —Ä—É–±):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(call.message, process_top_up_umoney_step)
    
    def process_top_up_cryptobot_step(message):
        try:
            amount_rub = float(message.text)
            chat_id = message.chat.id
    
            if amount_rub < 5 or amount_rub > 15000:
                bot.send_message(chat_id, "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 15000 —Ä—É–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                bot.register_next_step_handler(message, process_top_up_cryptobot_step)
                return
    
            usd_to_rub_rate = utils.get_usd_to_rub_rate()
            if usd_to_rub_rate is None:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞.")
                return
            amount_usd = amount_rub / usd_to_rub_rate
    
            pay_link, invoice_id = utils.get_pay_link(amount_usd)
            if pay_link and invoice_id:
                markup_message = bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' üí∏")
                msg = markup_message.message_id
    
                invoices[chat_id] = {'invoice_id': invoice_id, 'amount_rub': amount_rub, 'msg_id': msg, 'status': 'pending'}
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount_rub} —Ä—É–±", url=pay_link))
                markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_payment_cryptobot_{invoice_id}'))
                markup.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'cancel_payment_{invoice_id}'))
    
                bot.edit_message_reply_markup(chat_id, message_id=msg, reply_markup=markup)
            else:
                bot.send_message(chat_id, '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É‚ùå')
    
        except ValueError:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!‚ùå")
            bot.register_next_step_handler(message, process_top_up_cryptobot_step)
    
    def process_top_up_umoney_step(message):
        try:
            amount_rub = float(message.text)
            chat_id = message.chat.id
    
            if amount_rub < 5 or amount_rub > 15000:
                bot.send_message(chat_id, "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 15000 —Ä—É–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                bot.register_next_step_handler(message, process_top_up_umoney_step)
                return
    
            unique_label = f"{chat_id}_{message.message_id}"
            quickpay = Quickpay(
                receiver=config.YOOMONEY_RECEIVER,
                quickpay_form="shop",
                targets="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                paymentType="SB",
                sum=amount_rub,
                label=unique_label
            )
    
            pay_link = quickpay.redirected_url
            markup_message = bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' üí∏")
            msg = markup_message.message_id
    
            invoices[chat_id] = {'label': unique_label, 'amount_rub': amount_rub, 'msg_id': msg, 'status': 'pending'}
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount_rub} —Ä—É–±", url=pay_link))
            markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_payment_umoney_{unique_label}'))
            markup.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'cancel_payment_{unique_label}'))
    
            bot.edit_message_reply_markup(chat_id, message_id=msg, reply_markup=markup)
    
        except ValueError:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!‚ùå")
            bot.register_next_step_handler(message, process_top_up_umoney_step)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('check_payment_cryptobot_'))
    def check_payment_cryptobot(call):
        chat_id = call.message.chat.id
        invoice_id = call.data.split('check_payment_cryptobot_')[1]
        payment_status = utils.check_payment_status(invoice_id)
    
        if payment_status and payment_status.get('ok'):
            if 'items' in payment_status['result']:
                invoice = next((inv for inv in payment_status['result']['items'] if str(inv['invoice_id']) == invoice_id), None)
                if invoice:
                    status = invoice['status']
                    if status == 'paid' and invoices[chat_id]['status'] == 'pending':
                        invoices[chat_id]['status'] = 'paid'
                        bot.send_message(chat_id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!‚úÖ")
                        
                        conn = database.connect_db()
                        cursor = conn.cursor()
                        
                        amount_rub = invoices[chat_id]['amount_rub']
                        msg_id = invoices[chat_id]['msg_id']
                        cursor.execute('UPDATE users SET balance = balance + ?, total_topups = total_topups + ?, total_topup_count = total_topup_count + 1 WHERE id = ?', (amount_rub, amount_rub, chat_id))
                        conn.commit()
    
                        bot.delete_message(chat_id, msg_id)
                        del invoices[chat_id]
    
                        bot.send_message(chat_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_rub:.2f} —Ä—É–±! üí∏")
                        cursor.close()
                        conn.close()
                    else:
                        bot.answer_callback_query(call.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå', show_alert=True)
                else:
                    bot.answer_callback_query(call.id, '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert=True)
            else:
                print(f"–û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ 'items': {payment_status}")
                bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.', show_alert=True)
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {payment_status}")
            bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.', show_alert=True)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('check_payment_umoney_'))
    def check_payment_umoney(call):
        chat_id = call.message.chat.id
        label = call.data.split('check_payment_umoney_')[1]
        token = config.YOOMONEY_API_TOKEN  # –í–∞—à API —Ç–æ–∫–µ–Ω –ÆMoney
        client = Client(token)
        history = client.operation_history(label=label)
    
        if history.operations:
            operation = next((op for op in history.operations if op.label == label), None)
            if operation and operation.status == 'success' and invoices[chat_id]['status'] == 'pending':
                invoices[chat_id]['status'] = 'paid'
                bot.send_message(chat_id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!‚úÖ")
                
                conn = database.connect_db()
                cursor = conn.cursor()
                
                amount_rub = invoices[chat_id]['amount_rub']
                msg_id = invoices[chat_id]['msg_id']
                cursor.execute('UPDATE users SET balance = balance + ?, total_topups = total_topups + ?, total_topup_count = total_topup_count + 1 WHERE id = ?', (amount_rub, amount_rub, chat_id))
                conn.commit()

                bot.delete_message(chat_id, msg_id)
                del invoices[chat_id]

                bot.send_message(chat_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_rub:.2f} —Ä—É–±! üí∏")
                cursor.close()
                conn.close()
            else:
                bot.answer_callback_query(call.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå', show_alert=True)
        else:
            bot.answer_callback_query(call.id, '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert=True)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_payment_'))
    def cancel_payment(call):
        chat_id = call.message.chat.id
        
        if chat_id in invoices:
            msg_id = invoices[chat_id]['msg_id']
            del invoices[chat_id]
    
            bot.delete_message(chat_id, msg_id)
    
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        profile_button = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        products_button = types.KeyboardButton("üõçÔ∏è –¢–æ–≤–∞—Ä—ã")
        markup.add(profile_button, products_button)
    
        bot.send_message(chat_id, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚ùå", reply_markup=markup)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == 'gift_balance')
    def gift_balance(call):
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∑–∞—Ç–µ–º —Å—É–º–º—É (–ø—Ä–∏–º–µ—Ä: 12345678 1.50):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(call.message, process_gift_balance_step)
    
    def process_gift_balance_step(message):
        try:
            chat_id = message.chat.id
            parts = message.text.split()
            if len(parts) != 2:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID –°—É–º–º–∞ (–ø—Ä–∏–º–µ—Ä: 12345678 1.50)")
                bot.register_next_step_handler(message, process_gift_balance_step)
                return
            
            recipient_id = int(parts[0])
            amount = float(parts[1])
    
            if amount < 0.0:
                bot.send_message(chat_id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ 0.20 —Ä—É–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                bot.register_next_step_handler(message, process_gift_balance_step)
                return
    
            conn = database.connect_db()
            cursor = conn.cursor()
    
            cursor.execute('SELECT balance FROM users WHERE id = ?', (chat_id,))
            sender_balance = cursor.fetchone()[0]
    
            if sender_balance < amount:
                bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            cursor.execute('SELECT first_name FROM users WHERE id = ?', (recipient_id,))
            recipient = cursor.fetchone()
    
            if not recipient:
                bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
    
            sender_balance -= amount
            commission = amount * 0.1
            net_amount = amount - commission
    
            cursor.execute('UPDATE users SET balance = ? WHERE id = ?', (sender_balance, chat_id))
            cursor.execute('UPDATE users SET balance = balance + ? WHERE id = ?', (net_amount, recipient_id))
            conn.commit()
    
            sender_name = cursor.execute('SELECT first_name FROM users WHERE id = ?', (chat_id,)).fetchone()[0]
            
            bot.send_message(chat_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {net_amount:.2f} —Ä—É–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient[0]} üéâ")
            bot.send_message(
                recipient_id,
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ {net_amount:.2f} —Ä—É–± –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_name} üéâ"
            )
            
            cursor.close()
            conn.close()
    
        except ValueError:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! ‚ùå")
            bot.register_next_step_handler(message, process_gift_balance_step)
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} ‚ùå")
            bot.register_next_step_handler(message, process_gift_balance_step)
